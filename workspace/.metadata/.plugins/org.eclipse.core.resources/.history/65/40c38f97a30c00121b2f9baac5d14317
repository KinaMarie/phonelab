package edu.buffalo.cse.phonelab.usagemonitor;

import java.lang.reflect.InvocationTargetException;

import edu.buffalo.cse.phonelab.lib.BatteryStatsImpl;
import edu.buffalo.cse.phonelab.lib.PowerProfile;
import edu.buffalo.cse.phonelab.lib.ReflectionUtils;
import android.app.IntentService;
import android.content.Context;
import android.content.Intent;
import android.hardware.SensorManager;
import android.os.SystemClock;
import android.util.Log;

public class BatteryUsageService extends IntentService {

	public BatteryUsageService() {
		super("BatteryUsageService");
	}

	@Override
	protected void onHandleIntent(Intent intent) {
		String TAG = "BatteryUsageDetails";
		Log.v(TAG,"Service Started");
		//Instantiating the objects of phonelablib wrapper classes for further reflection
		BatteryStatsImpl mStats = new BatteryStatsImpl();
		PowerProfile mPowerProfile = new PowerProfile(getApplicationContext());
	
		try
		{
			Object mStatsType = ReflectionUtils.getStaticValue("android.os.BatteryStats", "STATS_SINCE_UNPLUGGED");
			//Calculating power consumption for each uid on the phone --->reference to powerAppUsage()
			SensorManager sensorManager = (SensorManager)getApplicationContext().getSystemService(Context.SENSOR_SERVICE);
	        final int which = (Integer) mStatsType;
	        final int speedSteps = (Integer)mPowerProfile.invoke("getNumSpeedSteps",(Object[]) null);
	        final double[] powerCpuNormal = new double[speedSteps];
	        final long[] cpuSpeedStepTimes = new long[speedSteps];
	        for (int p = 0; p < speedSteps; p++) 
	        	{
	            	powerCpuNormal[p] = (Double) mPowerProfile.invoke("getAveragePower",mPowerProfile.getValue("POWER_CPU_ACTIVE"), p);
	        	}
	        double appWakelockTime = 0;
	        long uSecTime = (Long) mStats.invoke("computeBatteryRealtime",SystemClock.elapsedRealtime() * 1000, which);
			Log.i(TAG, "uSecTime = "+uSecTime);
				        		
	       	double averageCostPerByte = 0.0;
	    	double mAppWifiRunning = (double) 0.0;
	    	
	    	//Calculate averageCostPerByte
	    	try{
	    		
				long WIFI_BPS = 1000000; // TODO: Extract average bit rates from system 
				long MOBILE_BPS = 200000; // TODO: Extract average bit rates from system
	        
				double WIFI_POWER = (Double) mPowerProfile.invoke("getAveragePower", mPowerProfile.getValue("POWER_WIFI_ACTIVE"))/3600; 
				double MOBILE_POWER = (Double) mPowerProfile.invoke("getAveragePower", mPowerProfile.getValue("POWER_RADIO_ACTIVE")) ;
				long mobileData = (Long) mStats.invoke("getMobileTcpBytesReceived",mStatsType) + (Long) mStats.invoke("getMobileTcpBytesSent",mStatsType);
				long wifiData = (Long) mStats.invoke("getTotalTcpBytesReceived",mStatsType) + (Long)mStats.invoke("getTotalTcpBytesSent",mStatsType) - mobileData;
				long radioDataUptimeMs = (Long)mStats.invoke("getRadioDataUptime", (Object [])null) / 1000;
				long mobileBps = radioDataUptimeMs != 0 ? mobileData * 8 * 1000 / radioDataUptimeMs : MOBILE_BPS;

				double mobileCostPerByte = MOBILE_POWER / (mobileBps / 8);
				double wifiCostPerByte = WIFI_POWER / (WIFI_BPS / 8);
				if (wifiData + mobileData != 0) 
					{
						averageCostPerByte = (mobileCostPerByte * mobileData + wifiCostPerByte * wifiData) / (mobileData + wifiData);
					} else 
					{
						averageCostPerByte = 0.0;
					}
//				Log.v(TAG, WIFI_POWER+" , "+MOBILE_POWER+"  ,  "+mobileData+"  ,  "+wifiData);
//				Log.v(TAG, "The average Data cost is "+averageCostPerByte);
			}catch(Exception e)
			{
				Log.e(TAG, "Error @ averageCostPerByte "+e);
			}
			
			
		//Getting all Uids and the mapping
		Object uidStats = mStats.invoke("getUidStats", (Object[]) null);
			
		/**
         * Going through each of the uid and calculating power consumption due to spu, data, wifi, sensor
         * Calling SparseArray.size() within the instance uidStats. 
         */	
		try
		{
			
			
			
			
		}
			
			
		}catch(Exception e)
		{
			Log.e(TAG, e.toString());
		}
		
		
	}

}
